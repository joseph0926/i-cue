datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * UserRole
 * - VIEWER: 일반 유저 / 가입하면 디폴트로 설정되는 역할
 * - PROPOSER: 기획 제안이 가능한 유저 <- 여기부터 추가 인증 필요
 * - ADMIN: 해당 서비스 관리자,매니저등
 */
enum UserRole {
  VIEWER
  PROPOSER
  ADMIN
}

/**
 * User
 * - 기본적으로 `매직링크 방식의 회원가입/로그인 기능 구현`
 * - 다만 추가 인증시 휴대폰 인증 고려
 */
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(VIEWER)

  accounts    Account[]
  sessions    Session[]
  broadcaster Broadcaster?

  @@map("users")
}

/**
 * Account
 * - Auth.js - Prisma
 */
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

/**
 * Session
 * - Auth.js
 */
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/**
 * VerificationToken
 * - Auth.js 이메일 인증 토큰
 */
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/**
 * BroadcasterRole
 * - 방송인 역할
 */
enum BroadcasterRole {
  YOUTUBER
  SOOP
  CHZZK
}

/**
 * Broadcaster
 * - 방송인으로 인증되면 생성되는 테이블
 */
model Broadcaster {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role BroadcasterRole

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}
