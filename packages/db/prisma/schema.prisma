datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  VIEWER
  STREAMER
  ADMIN
}

enum IdeaStatus {
  PENDING
  ACCEPTED
  REJECTED
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  role Role @default(VIEWER)

  accounts Account[]
  sessions Session[]

  proposedIdeas Idea[] @relation("ProposedIdeas")

  streamedIdeas Idea[] @relation("StreamerRelation")

  votes   IdeaVote[]
  rewards Reward[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Idea {
  id          String     @id @default(cuid())
  title       String
  description String     @db.Text
  category    String?
  status      IdeaStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  userId String
  user   User   @relation("ProposedIdeas", fields: [userId], references: [id])

  streamerId String?
  streamer   User?   @relation("StreamerRelation", fields: [streamerId], references: [id])

  votes   IdeaVote[]
  rewards Reward[]

  @@map("ideas")
}

model IdeaVote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  value     Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id])

  @@unique([ideaId, userId])
  @@map("idea_votes")
}

model Reward {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  points    Int?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  ideaId String
  idea   Idea   @relation(fields: [ideaId], references: [id])

  @@map("rewards")
}
